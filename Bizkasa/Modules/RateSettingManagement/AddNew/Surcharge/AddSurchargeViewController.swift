//
//  AddSurchargeViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 10/25/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit

enum SurchanrgeType: Int, CaseIterable {
    case checkoutDayList
    case checkoutNightList
    case checkinDayList
    case checkinNightList
    case priceByHour
    case addtionCustomerList
    
    var name: String {
        switch self {
        case .checkinDayList:
            return "Phụ thu checkin sớm (theo ngày)"
        case .checkoutDayList:
            return "Phụ thu quá giờ checkout (theo ngày)"
        case .checkinNightList:
            return "Phụ thu checkin sớm (theo đem)"
        case .checkoutNightList:
            return "Phụ thu quá giờ checkout (theo đêm)"
        case .priceByHour:
            return "Giá bán theo giờ"
        case .addtionCustomerList:
            return "Phụ thu thêm khách"
        }
    }
}

enum ConfigPriceType {
    case AddRoom
    case AddConfigPrice
    case EditConfigPrice
}

class AddSurchargeViewController: BaseViewController {
    
    @IBOutlet weak var tableView: UITableView!

	var presenter: AddSurchargePresenterProtocol?
    
    var configPrice = ConfigPriceEntity() {
        didSet {
            tableView.reloadData()
        }
    }
    
    var param: RateSettingEntity!
    
    var addOrUpdateConfigPriceParam: AddOrUpdateConfigPriceParam!
    
    var type: ConfigPriceType!
    
    weak var delegate: RateSettingDelegate?

	override func viewDidLoad() {
        super.viewDidLoad()
        configureTableView()
        switch type {
        case .AddRoom:
            if let config = param.ConfigPrices.first?.ConfigPriceRow {
                configPrice = config
            }
        case .AddConfigPrice, .EditConfigPrice:
            if let config = addOrUpdateConfigPriceParam.ConfigPrice?.ConfigPriceRow {
                configPrice = config
            }
        default:
            break
        }
        
    }
    
    override func setUpNavigation() {
        setTitleNavigation(title: type == .AddConfigPrice
                            ? "Thêm phụ thu"
                            : "Cập nhật phụ thu")
        addBackWhiteToNavigation()
    }

    private func configureTableView() {
        tableView.registerTableCell(AddSurchargeCell.self)
        tableView.register(header: HeaderSurchargeCell.self)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.rowHeight = UITableView.automaticDimension
        tableView.sectionHeaderHeight = UITableView.automaticDimension
        tableView.estimatedSectionHeaderHeight = 30
    }

    @IBAction func acceptButtonTapped() {
        switch type {
        case .AddRoom:
            param.ConfigPrices.first?.ConfigPriceRow = configPrice
            presenter?.addRoomClass(param: param)
        case .AddConfigPrice, .EditConfigPrice:
            addOrUpdateConfigPriceParam.ConfigPrice?.ConfigPriceRow = configPrice
            presenter?.addOrUpdateConfigPrice(param: addOrUpdateConfigPriceParam)
        default:
            break
        }
    }
}

extension AddSurchargeViewController: AddSurchargeViewProtocol {
    func didAddOrUpdateConfigPrice(result: [RateSettingEntity]?, error: APIError?) {
        if let _ = result {
            delegate?.updateDataRateSettingList()
            self.navigationController?.dismiss()
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
    
    func didAddRoomClass(result: [RateSettingEntity]?, error: APIError?) {
        
        if let _ = result {
            delegate?.updateDataRateSettingList()
            self.navigationController?.dismiss()
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
}

extension AddSurchargeViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return SurchanrgeType.allCases.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch SurchanrgeType(rawValue: section)  {
        case .checkinDayList:
            return configPrice.CheckinDayList.count
        case .checkoutDayList:
            return configPrice.CheckoutDayList.count
        case .checkinNightList:
            return configPrice.CheckinNightList.count
        case .checkoutNightList:
            return configPrice.CheckoutNightList.count
        case .priceByHour:
            return configPrice.PriceByDayList.count
        case .addtionCustomerList:
            return configPrice.AddtionCustomerList.count
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueTableCell(AddSurchargeCell.self)
        cell.setData(indexPath: indexPath)
        if type == .EditConfigPrice {
            cell.setPrice(price: configPrice, indexPath: indexPath)
        }
        cell.removeSurchargeCallback = { [weak self] indexpath in
            guard let self = self else { return }
            self.removeSurcharge(indexpath: indexpath)
        }
        cell.delegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let header = tableView.dequeue(header: HeaderSurchargeCell.self)
        header.setTitle(section: section)
        header.setShadawHeader()
        header.addCallback = { [weak self] section in
            guard let self = self else { return }
            self.addSurcharge(section: section)
        }
        return header
    }
    
    private func removeSurcharge(indexpath: IndexPath) {
        switch SurchanrgeType(rawValue: indexpath.section) {
        case .checkinDayList:
            self.configPrice.CheckinDayList.remove(at: indexpath.row)
        case .checkoutDayList:
            self.configPrice.CheckoutDayList.remove(at: indexpath.row)
        case .checkinNightList:
            self.configPrice.CheckinNightList.remove(at: indexpath.row)
        case .checkoutNightList:
            self.configPrice.CheckoutNightList.remove(at: indexpath.row)
        case .priceByHour:
            self.configPrice.PriceByDayList.remove(at: indexpath.row)
        case .addtionCustomerList:
            self.configPrice.AddtionCustomerList.remove(at: indexpath.row)
        default:
            break
        }
        tableView.reloadData()
    }
    
    private func addSurcharge(section: Int) {
        switch SurchanrgeType(rawValue: section) {
        case .checkinDayList:
            self.configPrice.CheckinDayList.append(CheckoutEntity())
        case .checkoutDayList:
            self.configPrice.CheckoutDayList.append(CheckoutEntity())
        case .checkinNightList:
            self.configPrice.CheckinNightList.append(CheckoutEntity())
        case .checkoutNightList:
            self.configPrice.CheckoutNightList.append(CheckoutEntity())
        case .priceByHour:
            self.configPrice.PriceByDayList.append(CheckoutEntity())
        case .addtionCustomerList:
            self.configPrice.AddtionCustomerList.append(CheckoutEntity())
        default:
            break
        }
        tableView.reloadData()
    }
    
}

extension AddSurchargeViewController: UITableViewDelegate {
    
}

extension AddSurchargeViewController: AddSurchargeCellDelegate {
    func updateSurcharge(indexPath: IndexPath, surcharge: CheckoutEntity) {
        switch SurchanrgeType(rawValue: indexPath.section) {
        case .checkinDayList:
            self.configPrice.CheckinDayList[indexPath.row] = surcharge
        case .checkoutDayList:
            self.configPrice.CheckoutDayList[indexPath.row] = surcharge
        case .checkinNightList:
            self.configPrice.CheckinNightList[indexPath.row] = surcharge
        case .checkoutNightList:
            self.configPrice.CheckoutNightList[indexPath.row] = surcharge
        case .priceByHour:
            self.configPrice.PriceByDayList[indexPath.row] = surcharge
        case .addtionCustomerList:
            self.configPrice.AddtionCustomerList[indexPath.row] = surcharge
        default:
            break
        }
    }
}
