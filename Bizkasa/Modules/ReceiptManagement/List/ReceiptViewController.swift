//
//  ReceiptViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 6/15/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit
import ExpandingMenu

class ReceiptViewController: HomeBaseViewController {
    
    @IBOutlet weak var tbReceipt        : UITableView!
//    @IBOutlet weak var menuButton: ExpandingMenuButton!
    @IBOutlet weak var lbTotal          : UILabel!
    @IBOutlet weak var tfName           : UITextField!
    @IBOutlet weak var vPaymentStatus   : AppDropdownBorder!
    @IBOutlet weak var vPaymentType     : AppDropdownBorder!
    @IBOutlet weak var vTime            : AppDateTime!
    @IBOutlet weak var hightFilterView  : NSLayoutConstraint!
    @IBOutlet weak var btnHideFilter    : UIButton!
    @IBOutlet weak var filterButton    : UIButton!
    
    var refreshControl = UIRefreshControl()
    
    var invoiceResponse: InvoiceResponse! {
        didSet {
            self.lbTotal.text = "\(self.invoiceResponse.totalAmount*.formattedWithSeparator) VNĐ"
            self.listInvoice = self.invoiceResponse.dataPaging?.data ?? []
        }
    }
    
    var listInvoice: [InvoiceEntity] = [] {
        didSet {
            self.tbReceipt.reloadData()
        }
    }
    
    var presenter: ReceiptPresenterProtocol?
    
    let param = GetInvoiceParam.setDefaultParam()
    
    var canLoadMore = true
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureTableView()
        
        refreshControl.attributedTitle = NSAttributedString(string: "Pull to refresh")
        refreshControl.addTarget(self, action: #selector(refreshData), for: .valueChanged)
        tbReceipt.addSubview(refreshControl) // not required when using UITableViewController
        
        NotificationCenter.default.addObserver(forName: .refreshReceptionist, object: nil, queue: nil) { (_) in
            self.refreshData()
        }
        
//        configureExpandingMenuButton()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        refreshData()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    override func setUpView() {
        filterButton.setShadowCircle()
        
        vPaymentStatus.dataSource = ["Trạng thái thanh toán",
                                     "Chưa thanh toán",
                                     "Công nợ",
                                     "Đã thanh toán"]
        vPaymentType.dataSource = ["Hình thức thanh toán",
                                   "Tiền mặt",
                                   "Chuyển khoản",
                                   "Khác",
                                   "Thanh toán online"]
        vTime.setTitleAndLogo(AppImage.imgTime, title: "Khoảng thời gian")
        btnHideFilterTapped()
        
        vTime.setDateAndTime(fromTime: DateHelper.getDateTimeISO(), toTime: DateHelper.getDateTimeISO())
        
        vPaymentStatus.dropDownCallBack = {[weak self] (index, item) in
            switch index {
            case 1:
                self?.param.InvoiceStatus = 1
            case 2:
                self?.param.InvoiceStatus = 2
            case 3:
                self?.param.InvoiceStatus = 7
            default:
                self?.param.InvoiceStatus = nil
            }
        }
        
        vPaymentType.dropDownCallBack = {[weak self] (index, item) in
            self?.param.PaymentMethod = index != 0 ? index - 1 : nil
        }
    }
    
    @objc private func refreshData() {
        let param = GetInvoiceParam.setDefaultParam()
        presenter?.getInvoices(param: param)
    }
    
    override func setUpNavigation() {
        setTitleNavigation(title: "Phiếu thu")
//        addButtonToNavigation(image: AppImage.imgAddNew, style: .right, action: #selector(btnAddNewTapped))
    }
    
    private func configureTableView() {
        tbReceipt.registerTableCell(ListReceiptCell.self)
        tbReceipt.registerTableCell(ReceiptDetailCell.self)
        tbReceipt.delegate = self
        tbReceipt.dataSource = self
        tbReceipt.rowHeight = UITableView.automaticDimension
        tbReceipt.contentInset.bottom = 40
        
    }
    
    var isShowFilter = false
    @IBAction func btnFilterTapped() {
        isShowFilter = !isShowFilter
        btnHideFilter.isHidden = !isShowFilter
        view.layoutIfNeeded()
        UIView.animate(withDuration: 0.2) {
            self.hightFilterView.constant = self.isShowFilter ? 295 : 0
            self.view.layoutIfNeeded()
        }
    }
    
    @IBAction func btnHideFilterTapped() {
        view.layoutIfNeeded()
        isShowFilter = false
        btnHideFilter.isHidden = true
        UIView.animate(withDuration: 0.2) {
            self.hightFilterView.constant = self.isShowFilter ? 295 : 0
            self.view.layoutIfNeeded()
        }
    }
    
    @IBAction func btnFiltterTapped() {
        param.Page?.currentPage = 1
        param.Page?.pageSize = 20
        canLoadMore = true
        param.FromDate = vTime.fromTime
        param.ToDate = vTime.toTime
        param.Keyword = tfName.text
        presenter?.getInvoices(param: param)
        btnHideFilterTapped()
    }
}

extension ReceiptViewController: ReceiptViewProtocol {
    func didGetInvoices(result: InvoiceResponse?, error: APIError?) {
        refreshControl.endRefreshing()
        if let result = result {
            if result.dataPaging?.data.count ?? 0 < 20 {
                self.canLoadMore = false
            }
            if self.param.Page?.currentPage == 1 {
                result.dataPaging?.data.isEmpty ?? true ? self.tbReceipt.setEmptyView() : self.tbReceipt.restore()
                self.invoiceResponse = result
            } else {
                self.listInvoice.append(contentsOf: result.dataPaging!.data)
            }
            
        } else {
            
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
}

extension ReceiptViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return listInvoice.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listInvoice[section].isCollapse ? 1 : listInvoice[section].InvoiceService.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.section == listInvoice.count - 3
            && listInvoice.count < invoiceResponse.dataPaging!.totalRecord ?? 0
            && canLoadMore {
            self.param.Page?.currentPage += 1
            self.presenter?.getInvoices(param: self.param)
        }
        if indexPath.row == 0 {
            let cell = tableView.dequeueTableCell(ListReceiptCell.self)
            cell.invoice = listInvoice[indexPath.section]
            return cell
        } else {
            let cell = tableView.dequeueTableCell(ReceiptDetailCell.self)
            cell.setData(detail: listInvoice[indexPath.section].InvoiceService[indexPath.row - 1])
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            listInvoice[indexPath.section].isCollapse = !listInvoice[indexPath.section].isCollapse
            self.tbReceipt.beginUpdates()
            self.tbReceipt.reloadSections([indexPath.section], with: .none)
            self.tbReceipt.endUpdates()
        }
    }
}
