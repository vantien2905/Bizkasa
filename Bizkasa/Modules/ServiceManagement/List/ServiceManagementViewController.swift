//
//  ServiceManagementViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 8/23/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit
import SwipeCellKit

class ServiceManagementViewController: HomeBaseViewController {
    
    @IBOutlet weak var tbListService: UITableView!
    
    var presenter: ServiceManagementPresenterProtocol?
    
    var listWidgetType: [WidgetTypeEntity] = [] {
        didSet {
            self.tbListService.reloadData()
        }
    }
    
    var buttonDisplayMode: ButtonDisplayMode = .imageOnly
    var buttonStyle: ButtonStyle = .backgroundColor
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureTableView()
        presenter?.getWidget(type: 1)
    }
    
    override func setUpNavigation() {
        addBackWhiteToNavigation()
        setTitleNavigation(title: "Dịch vụ")
    }

    private func configureTableView() {
        tbListService.registerTableCell(ServiceCell.self)
        tbListService.delegate = self
        tbListService.dataSource = self
    }
    
    private func refreshData() {
        presenter?.getWidget(type: 1)
    }
}

extension ServiceManagementViewController: ServiceManagementViewProtocol {
    func didDeleteWedget(result: BaseResponse?, error: APIError?) {
        if let result = result?.data as? Bool, result {
            self.refreshData()
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
    
    
    func didGetWidget(result: [WidgetTypeEntity]?, error: APIError?) {
        if let result = result {
            self.listWidgetType = result
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
}

extension ServiceManagementViewController: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return listWidgetType.count
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listWidgetType[section].Widgets.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueTableCell(ServiceCell.self)
        cell.lbTitle.text = listWidgetType[indexPath.section].Widgets[indexPath.row].NamePrice
        cell.delegate = self
        return cell
    }

    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return listWidgetType[section].GroupName&
    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
}

extension ServiceManagementViewController: SwipeTableViewCellDelegate {
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -> [SwipeAction]? {
        guard orientation == .right else { return nil }
        
        let edit = SwipeAction(style: .default, title: nil) { action, indexPath in
            print("Edit")
            self.editActionTapped(indexPath: indexPath)
        }
        configure(action: edit, with: .edit)
        
        let delete = SwipeAction(style: .destructive, title: nil) { action, indexPath in
            print("Delete")
            self.deleteActionTapped(indexPath: indexPath)
        }
        configure(action: delete, with: .trash)
        
        return [delete, edit]
    }
    
    func configure(action: SwipeAction, with descriptor: ActionDescriptor) {
        //        action.title = descriptor.title(forDisplayMode: buttonDisplayMode)
        action.image = descriptor.image(forStyle: buttonStyle, displayMode: buttonDisplayMode)
        
        switch buttonStyle {
        case .backgroundColor:
            action.backgroundColor = descriptor.color(forStyle: buttonStyle)
        case .circular:
            action.backgroundColor = .clear
            action.transitionDelegate = ScaleTransition.default
        }
    }
    
    private func editActionTapped(indexPath: IndexPath) {
        let vc = EditServiceRouter.createModule(listType: listWidgetType, widget: listWidgetType[indexPath.section].Widgets[indexPath.row], indexType: indexPath.section)
        vc.modalPresentationStyle = .overCurrentContext
        vc.modalTransitionStyle = .crossDissolve
        vc.reloadListPage = { [weak self] in
            guard let self = self else { return }
            self.presenter?.getWidget(type: 1)
            self.makeToast(message: "Cập nhật thành công")
        }
        present(vc, animated: false, completion: nil)
    }
    
    private func deleteActionTapped(indexPath: IndexPath) {
            
        self.showAlert(title: "Xoá", message: "Bạn có chắc chắn muốn xoá?") {
            self.presenter?.deleteWedget(listID: [self.listWidgetType[indexPath.section].Widgets[indexPath.row].Id*])
        }
    }
}

