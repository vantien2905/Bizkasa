//
//  InsertPopUpViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 7/27/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit

enum FloorAndRoomAction {
    case editFloor
    case addFloor
    case editRoom
    case addRoom
}

protocol InsertPopUpViewControllerDelegate: class {
    func acceptTapped(action: FloorAndRoomAction, floorParam: InsertOrUpdateFloorParam?, roomParam: [EditRoomParam]?)
}

class InsertPopUpViewController: BaseViewController {
    
    @IBOutlet weak var tfName   : AppTextFieldLogo!
    @IBOutlet weak var vFloor   : AppDropdown!
    @IBOutlet weak var vRoomType: AppDropdown!
    @IBOutlet weak var btnAccept: UIButton!
    
    var presenter: InsertPopUpPresenterProtocol?
    
    var actionType: FloorAndRoomAction!
    
    var floor: FloorEntity?
    var room: RoomEntity?
    var indexPath: IndexPath?
    
    let floorParam = InsertOrUpdateFloorParam()
    var roomParam = EditRoomParam()
    
    weak var delegate: InsertPopUpViewControllerDelegate?
    
    var listRoomType: [RoomTypeEntity] = [] {
        didSet {
            
            for (index, item) in self.listRoomType.enumerated() {
                if self.roomParam.RoomClassId == item.Id {
                    vRoomType.itemSelected = index
                }
            }
            if vRoomType.itemSelected == -1 {
                self.roomParam.RoomClassId = self.listRoomType[0].Id
            }
            vRoomType.dataSource = self.listRoomType.map({$0.Name&})
        }
    }
    
    var listFloor: [FloorEntity] = [] {
        didSet {
            
            for (index, item) in self.listFloor.enumerated() {
                if self.roomParam.FloorId == item.Id {
                    vFloor.itemSelected = index
                }
            }
            if vFloor.itemSelected == -1 {
                self.roomParam.FloorId = self.listFloor[0].Id
            }
            vFloor.dataSource = self.listFloor.map({$0.Name&})
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.definesPresentationContext = true
        self.view.backgroundColor = AppColor.normalBlack.withAlphaComponent(0.3)
        getData()
        self.setHideView(true)
        self.tfName.isHidden = true
    }
    
    override func viewDidAppear(_ animated: Bool) {
        vFloor.setTitleAndLogo(AppImage.imgHotel, title: "Thuộc tầng")
        vRoomType.setTitleAndLogo(AppImage.coupleRoom, title: "Loại phòng")
        
        switch actionType {
        case .editFloor, .addFloor:
            UIView.animate(withDuration: 0.3) {
                self.tfName.setTitleAndLogo(AppImage.imgRoom, title: "Tên tầng")
                self.setHideView(true)
                self.tfName.isHidden = false
                if self.actionType == .editFloor {
                    self.tfName.setText(self.floor?.Name)
                } else {
                    self.btnAccept.setTitle(text: "Thêm")
                }
                self.view.layoutIfNeeded()
            }
            
        default:
            UIView.animate(withDuration: 0.3) {
                self.tfName.setTitleAndLogo(AppImage.imgRoom, title: "Tên phòng")
                self.setHideView(false)
                self.tfName.isHidden = false
                self.roomParam.RoomClassId = self.room?.RoomClassId
                self.roomParam.RoomId =  self.room?.Id
                
                if self.actionType == .editRoom {
                    self.roomParam.FloorId = self.floor?.Id
                    self.tfName.setText(self.room?.Name)
                } else {
                    self.btnAccept.setTitle(text: "Thêm")
                }
                self.view.layoutIfNeeded()
            }
        }
    }
    
    private func setHideView(_ isHide: Bool) {
        self.vFloor.isHidden = isHide
        self.vRoomType.isHidden = isHide
    }
    
    private func getData() {
        switch actionType {
        case .addRoom, .editRoom:
            presenter?.getListFloor()
            presenter?.getListRoomClass()
        default:
            break
        }
    }
    
    @IBAction func btnCloseTapped() {
        self.dismiss(animated: false)
    }
    
    override func setUpViews() {
        //        vFloor.dataSource = ["Tang 1", "Tang 2", "tang 3"]
        //        vRoomType.dataSource = ["Phong don", "Phong doi"]
        vFloor.dropDownCallBack = { index, item in
            self.roomParam.FloorId = self.listFloor[index].Id
        }
        
        vRoomType.dropDownCallBack = { index, item in
            self.roomParam.RoomClassId = self.listRoomType[index].Id
        }
    }
    
    @IBAction func btnAcceptTapped() {
        switch actionType {
        case .addFloor:
            floorParam.Name = tfName.getText()
            delegate?.acceptTapped(action: actionType, floorParam: floorParam, roomParam: nil)
        case .editFloor:
            floorParam.Name = tfName.getText()
            floorParam.NumRooms = floor?.NumRooms
            floorParam.RoomClassId = floor?.RoomClassId
            floorParam.Id = floor?.Id
            delegate?.acceptTapped(action: actionType, floorParam: floorParam, roomParam: nil)
        default:
            roomParam.RoomName = tfName.getText()
            let list = tfName.getText().splitted(by: ";").map({return EditRoomParam(FloorId: roomParam.FloorId*, RoomClassId: roomParam.RoomClassId*, RoomName: $0, roomID: roomParam.RoomId*)})
            delegate?.acceptTapped(action: actionType, floorParam: nil, roomParam: list)
        }
        
        btnCloseTapped()
    }
    
}

extension InsertPopUpViewController: InsertPopUpViewProtocol {
    func didGetRoomForEdit(result: EditRoomParam?, error: APIError?) {
//        if let result = result {
//            self.roomParam = result
//        } else {
//            self.makeToast(message: error?.message?.first ?? "")
//        }
    }
    
    func didGetListRoomClass(result: [RoomTypeEntity]?, error: APIError?) {
        if let result = result {
            self.listRoomType = result
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
    
    func didGetListFloor(result: [FloorEntity]?, error: APIError?) {
        if let result = result {
            self.listFloor = result
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
}
