//
//  RoomManagementViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 7/19/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit
import SwipeCellKit
import Alamofire

class RoomManagementViewController: HomeBaseViewController {
    
    @IBOutlet weak var tbRoomManagement : UITableView!
    @IBOutlet weak var btnAdd           : UIButton!
    @IBOutlet weak var btnAddRoom       : UIButton!
    @IBOutlet weak var btnAddFloor      : UIButton!
    
    var presenter: RoomManagementPresenterProtocol?
    
    var listFloor: [FloorEntity] = [] {
        didSet {
            self.tbRoomManagement.reloadData()
        }
    }
    
    var buttonDisplayMode: ButtonDisplayMode = .imageOnly
    var buttonStyle: ButtonStyle = .backgroundColor
    var refreshControl = UIRefreshControl()
    var isHideAddAction = true
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureTableview()
        presenter?.getFloorWithRoom(token: UserDefaultHelper.shared.get(key: AppKey.tokenID)&)
        
        refreshControl.attributedTitle = NSAttributedString(string: "Pull to refresh")
        refreshControl.addTarget(self,
                                 action: #selector(refreshData),
                                 for: .valueChanged)
        tbRoomManagement.addSubview(refreshControl)
        
        showHideAction(true)
    }
    
    @objc private func refreshData() {
        presenter?.getFloorWithRoom(token: UserDefaultHelper.shared.get(key: AppKey.tokenID)&)
    }
    
    override func setUpView() {
        setTitleNavigation(title: "Quản lý tầng/ lầu")
        btnAdd.setShadowCircle()
    }
    
    private func configureTableview() {
        tbRoomManagement.registerTableCell(RoomCell.self)
        tbRoomManagement.registerTableCell(FloorCell.self)
        tbRoomManagement.delegate = self
        tbRoomManagement.dataSource = self
        tbRoomManagement.rowHeight = UITableView.automaticDimension
        tbRoomManagement.contentInset.bottom = 60
    }
    
    private func showHideAction(_ show: Bool) {
        btnAddRoom.isHidden = show
        btnAddFloor.isHidden = show
    }
    
    @IBAction func btnAddTapped(_ sender: UIButton) {
        switch sender {
        case btnAdd:
            isHideAddAction = !isHideAddAction
            btnAdd.rotate(isHideAddAction ? 0 : .pi)
            UIView.animate(withDuration: 0.3) {
                self.showHideAction(self.isHideAddAction)
                self.view.layoutIfNeeded()
            }
        case btnAddRoom:
            let vc = InsertPopUpRouter.createModule(actionType: .addRoom,
                                                    indexPath: nil,
                                                    room: nil,
                                                    floor: nil)
            vc.modalPresentationStyle = .overCurrentContext
            vc.modalTransitionStyle = .crossDissolve
            vc.delegate = self
            present(vc, animated: false, completion: nil)
        case btnAddFloor:
            let vc = InsertPopUpRouter.createModule(actionType: .addFloor,
                                                    indexPath: nil,
                                                    room: nil,
                                                    floor: nil)
            vc.modalPresentationStyle = .overCurrentContext
            vc.modalTransitionStyle = .crossDissolve
            vc.delegate = self
            present(vc, animated: false, completion: nil)
        default:
            break
        }
        
    }
    
}

extension RoomManagementViewController: RoomManagementViewProtocol {
    func didDeleteFloor(result: BaseResponse?, error: APIError?) {
        handleDidReceiveData(result: result, error: error)
    }
    
    func didInsertOrUpdateFloor(result: BaseResponse?, error: APIError?) {
        handleDidReceiveData(result: result, error: error)
    }
    
    func didEditRoom(result: BaseResponse?, error: APIError?) {
        handleDidReceiveData(result: result, error: error)
    }
    
    func didDeleteRoom(result: BaseResponse?, error: APIError?) {
        handleDidReceiveData(result: result, error: error)
    }
    
    func didGetFloorWithRoom(result: [FloorEntity]?, error: APIError?) {
        refreshControl.endRefreshing()
        if let result = result {
            result.isEmpty ? tbRoomManagement.setEmptyView() : tbRoomManagement.restore()
            self.listFloor = result
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
    
    private func handleDidReceiveData(result: BaseResponse?, error: APIError?) {
        if let result = result {
            if let data = result.data as? Bool, data {
                refreshData()
            } else {
                self.makeToast(message: result.message?.first ?? "")
            }
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
    
}

extension RoomManagementViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return listFloor.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listFloor[section].NumRooms* + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            let cell = tableView.dequeueTableCell(FloorCell.self)
            cell.lbTitle.text = "\(listFloor[indexPath.section].Name&) (\(listFloor[indexPath.section].NumRooms*) phòng)"
            cell.delegate = self
            return cell
        } else {
            let cell = tableView.dequeueTableCell(RoomCell.self)
            cell.room = listFloor[indexPath.section].Rooms[indexPath.row - 1]
            cell.delegate = self
            return cell
        }
    }
}

extension RoomManagementViewController: SwipeTableViewCellDelegate {
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -> [SwipeAction]? {
        guard orientation == .right else { return nil }
        
        let edit = SwipeAction(style: .default, title: nil) { action, indexPath in
            print("Edit")
            self.editActionTapped(indexPath: indexPath)
        }
        configure(action: edit, with: .edit)
        
        let delete = SwipeAction(style: .destructive, title: nil) { action, indexPath in
            print("Delete")
            self.deleteActionTapped(indexPath: indexPath)
        }
        configure(action: delete, with: .trash)
        
        return [delete, edit]
    }
    
    func configure(action: SwipeAction, with descriptor: ActionDescriptor) {
        //        action.title = descriptor.title(forDisplayMode: buttonDisplayMode)
        action.image = descriptor.image(forStyle: buttonStyle, displayMode: buttonDisplayMode)
        
        switch buttonStyle {
        case .backgroundColor:
            action.backgroundColor = descriptor.color(forStyle: buttonStyle)
        case .circular:
            action.backgroundColor = .clear
            action.transitionDelegate = ScaleTransition.default
        }
    }
    
    private func editActionTapped(indexPath: IndexPath) {
        if indexPath.row == 0 {
            let floor = listFloor[indexPath.section]
            let vc = InsertPopUpRouter.createModule(actionType: .editFloor, indexPath: indexPath, room: nil, floor: floor)
            vc.modalPresentationStyle = .overCurrentContext
            vc.modalTransitionStyle = .crossDissolve
            vc.delegate = self
            present(vc, animated: false, completion: nil)
        } else {
            let floor = listFloor[indexPath.section]
            let room = listFloor[indexPath.section].Rooms[indexPath.row - 1]
            let vc = InsertPopUpRouter.createModule(actionType: .editRoom, indexPath: indexPath, room: room, floor: floor)
            vc.modalPresentationStyle = .overCurrentContext
            vc.modalTransitionStyle = .crossDissolve
            vc.delegate = self
            present(vc, animated: false, completion: nil)
        }
    }
    
    private func deleteActionTapped(indexPath: IndexPath) {
        if indexPath.row == 0 {
            let floor = listFloor[indexPath.section]
            self.showAlert(title: "Xoá phòng", message: "Bạn có chắc chắn muốn xoá tầng \(floor.Name&) ?") {
                if let idFloor = floor.Id {
                    self.presenter?.deleteFloor(id: idFloor)
                }
            }
        } else {
            let room = listFloor[indexPath.section].Rooms[indexPath.row - 1]
            self.showAlert(title: "Xoá phòng", message: "Bạn có chắc chắn muốn xoá phòng \(room.Name&) ?") {
                if let idRoom = room.Id {
                    self.presenter?.deleteRoom(id: idRoom)
                }
            }
            
        }
    }
}

extension RoomManagementViewController: InsertPopUpViewControllerDelegate {
    func acceptTapped(action: FloorAndRoomAction, floorParam: InsertOrUpdateFloorParam?, roomParam: [EditRoomParam]?) {
        switch action {
        case .editFloor, .addFloor:
            guard let param = floorParam else { return }
            presenter?.insertOrUpdateFloor(param: param)
        case .editRoom:
            guard let param = roomParam?.first else { return }
            presenter?.editRoom(param: param)
        case .addRoom:
            guard let param = roomParam else { return }
            let paramJson = param.map({$0.toJSON()})
            addRoom(paramJson)
        default:
            break
        }
    }
    
    private func addRoom(_ json: [[String: Any]]) {
        //        let json: [[String: Any]] = [EditRoomParam(FloorId: 4680, RoomClassId: 589, RoomName: "519").toJSON(),
        //                EditRoomParam(FloorId: 4680, RoomClassId: 589, RoomName: "520").toJSON()]
        //
        let jsonData = try? JSONSerialization.data(withJSONObject: json)
        
        // create post request
        let url = URL(string: "http://media.bizkasa.com/api/Room/InsertRoom")!
        
        var request = try! URLRequest(url: url, method: .post, headers: DefaultHeader().addAuthHeader())
        //        request.httpMethod = "POST"
        
        
        // insert json data to the request
        request.httpBody = jsonData
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                print(error?.localizedDescription ?? "No data")
                return
            }
            let responseJSON = try? JSONSerialization.jsonObject(with: data, options: [])
            if let responseJSON = responseJSON as? [String: Any] {
                print(responseJSON)
                if let _ = responseJSON["Data"] as? Bool {
                    self.refreshData()
                }
                
            }
        }
        
        task.resume()
    }
}
