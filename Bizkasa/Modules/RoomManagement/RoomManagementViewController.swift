//
//  RoomManagementViewController.swift
//  Bizkasa
//
//  Created Tien Dinh on 7/19/20.
//  Copyright © 2020 DINH VAN TIEN. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit
import SwipeCellKit

class RoomManagementViewController: HomeBaseViewController {
    
    @IBOutlet weak var tbRoomManagement: UITableView!

	var presenter: RoomManagementPresenterProtocol?
    
    var listFloor: [FloorEntity] = [] {
        didSet {
            self.tbRoomManagement.reloadData()
        }
    }
    
    var buttonDisplayMode: ButtonDisplayMode = .imageOnly
    var buttonStyle: ButtonStyle = .backgroundColor

    var refreshControl = UIRefreshControl()
    
	override func viewDidLoad() {
        super.viewDidLoad()
        configureTableview()
        presenter?.getFloorWithRoom(token: UserDefaultHelper.shared.get(key: AppKey.tokenID)&)
        
        refreshControl.attributedTitle = NSAttributedString(string: "Pull to refresh")
        refreshControl.addTarget(self, action: #selector(refreshData), for: .valueChanged)
        tbRoomManagement.addSubview(refreshControl)
    }
    
    @objc private func refreshData() {
       presenter?.getFloorWithRoom(token: UserDefaultHelper.shared.get(key: AppKey.tokenID)&)
    }
    
    override func setUpView() {
        setTitleNavigation(title: "Quản lý tầng/ lầu")
    }

    private func configureTableview() {
        tbRoomManagement.registerTableCell(RoomCell.self)
        tbRoomManagement.registerTableCell(FloorCell.self)
        tbRoomManagement.delegate = self
        tbRoomManagement.dataSource = self
        tbRoomManagement.rowHeight = UITableView.automaticDimension
    }
}

extension RoomManagementViewController: RoomManagementViewProtocol {
    func didGetFloorWithRoom(result: [FloorEntity]?, error: APIError?) {
        refreshControl.endRefreshing()
        if let result = result {
            result.isEmpty ? tbRoomManagement.setEmptyView() : tbRoomManagement.restore()
            self.listFloor = result
        } else {
            self.makeToast(message: error?.message?.first ?? "")
        }
    }
	
}

extension RoomManagementViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return listFloor.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listFloor[section].NumRooms* + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            let cell = tableView.dequeueTableCell(FloorCell.self)
            cell.lbTitle.text = "\(listFloor[indexPath.section].Name&) (\(listFloor[indexPath.section].NumRooms*) phòng)"
            cell.delegate = self
            return cell
        } else {
            let cell = tableView.dequeueTableCell(RoomCell.self)
            cell.room = listFloor[indexPath.section].Rooms[indexPath.row - 1]
            cell.delegate = self
            return cell
        }
    }
}

extension RoomManagementViewController: SwipeTableViewCellDelegate {
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -> [SwipeAction]? {
        guard orientation == .right else { return nil }

        let edit = SwipeAction(style: .default, title: nil) { action, indexPath in
            print("Edit")
            
        }
        configure(action: edit, with: .edit)
        
        let delete = SwipeAction(style: .destructive, title: nil) { action, indexPath in
            print("Delete")
        }
        configure(action: delete, with: .trash)
        
//        let cell = tableView.cellForRow(at: indexPath) as! RoomCell
//        let closure: (UIAlertAction) -> Void = { _ in cell.hideSwipe(animated: true) }
//        let more = SwipeAction(style: .default, title: nil) { action, indexPath in
//            let controller = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
//            controller.addAction(UIAlertAction(title: "Reply", style: .default, handler: closure))
//            controller.addAction(UIAlertAction(title: "Forward", style: .default, handler: closure))
//            controller.addAction(UIAlertAction(title: "Mark...", style: .default, handler: closure))
//            controller.addAction(UIAlertAction(title: "Notify Me...", style: .default, handler: closure))
//            controller.addAction(UIAlertAction(title: "Move Message...", style: .default, handler: closure))
//            controller.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: closure))
//            self.present(controller, animated: true, completion: nil)
//        }
//        configure(action: more, with: .more)
        
        return [delete, edit]
    }
    
    func configure(action: SwipeAction, with descriptor: ActionDescriptor) {
//        action.title = descriptor.title(forDisplayMode: buttonDisplayMode)
        action.image = descriptor.image(forStyle: buttonStyle, displayMode: buttonDisplayMode)
        
        switch buttonStyle {
        case .backgroundColor:
            action.backgroundColor = descriptor.color(forStyle: buttonStyle)
        case .circular:
            action.backgroundColor = .clear
//            action.textColor = descriptor.color(forStyle: buttonStyle)
//            action.font = .systemFont(ofSize: 13)
            action.transitionDelegate = ScaleTransition.default
        }
    }
}
